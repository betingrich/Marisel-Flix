<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Marisel Flix - Watch & Download Movies</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        :root {
            --primary: #e50914;
            --secondary: #ff6b00;
            --dark: #0f0f0f;
            --light-dark: #1a1a1a;
            --card-bg: #2d2d2d;
            --text: #ffffff;
            --text-secondary: #b3b3b3;
            --accent: #00a8ff;
        }

        body {
            background-color: var(--dark);
            color: var(--text);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 15px;
        }

        /* Header Styles */
        header {
            background: linear-gradient(to bottom, rgba(0,0,0,0.9) 0%, rgba(0,0,0,0) 100%);
            padding: 15px 0;
            position: fixed;
            width: 100%;
            z-index: 1000;
            transition: background-color 0.3s, padding 0.3s;
        }

        header.scrolled {
            background-color: var(--dark);
            padding: 10px 0;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary);
            text-decoration: none;
            display: flex;
            align-items: center;
        }

        .logo span {
            color: var(--text);
        }

        .logo i {
            margin-right: 8px;
            font-size: 26px;
        }

        .logo-img {
            width: 40px;
            height: 40px;
            margin-right: 10px;
            border-radius: 5px;
        }

        .mobile-menu-btn {
            display: none;
            background: transparent;
            border: none;
            color: var(--text);
            font-size: 24px;
            cursor: pointer;
        }

        nav ul {
            display: flex;
            list-style: none;
        }

        nav ul li {
            margin-left: 20px;
        }

        nav ul li a {
            color: var(--text);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s;
            font-size: 15px;
        }

        nav ul li a:hover, nav ul li a.active {
            color: var(--primary);
        }

        .header-actions {
            display: flex;
            align-items: center;
        }

        .search-container {
            display: flex;
            align-items: center;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 30px;
            padding: 6px 12px;
            margin-right: 15px;
            transition: all 0.3s;
            border: 2px solid transparent;
        }

        .search-container:focus-within {
            background: rgba(255, 255, 255, 0.15);
            box-shadow: 0 0 10px rgba(229, 9, 20, 0.3);
            border-color: var(--primary);
        }

        .search-container input {
            background: transparent;
            border: none;
            color: var(--text);
            padding: 5px 8px;
            width: 180px;
            outline: none;
            font-size: 14px;
        }

        .search-container button {
            background: transparent;
            border: none;
            color: var(--text);
            cursor: pointer;
            font-size: 14px;
        }

        .user-actions {
            display: flex;
            gap: 12px;
        }

        .user-actions button {
            background: transparent;
            border: none;
            color: var(--text);
            cursor: pointer;
            font-size: 16px;
            transition: color 0.3s;
        }

        .user-actions button:hover {
            color: var(--primary);
        }

        /* Hero Section */
        .hero {
            height: 80vh;
            background-size: cover;
            background-position: center;
            display: flex;
            align-items: center;
            padding-top: 70px;
            position: relative;
            transition: background-image 1s ease-in-out;
        }

        .hero-content {
            max-width: 600px;
            z-index: 2;
            background: rgba(0, 0, 0, 0.7);
            padding: 30px;
            border-radius: 10px;
        }

        .hero h1 {
            font-size: 42px;
            margin-bottom: 15px;
            line-height: 1.2;
        }

        .hero p {
            font-size: 16px;
            margin-bottom: 25px;
            color: var(--text-secondary);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            background: var(--primary);
            color: var(--text);
            padding: 10px 22px;
            border-radius: 30px;
            text-decoration: none;
            font-weight: bold;
            transition: all 0.3s;
            border: none;
            cursor: pointer;
            margin-right: 10px;
            font-size: 14px;
        }

        .btn:hover {
            background: #f40612;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(229, 9, 20, 0.4);
        }

        .btn i {
            margin-right: 6px;
        }

        .btn-secondary {
            background: rgba(255, 255, 255, 0.2);
        }

        .btn-secondary:hover {
            background: rgba(255, 255, 255, 0.3);
            box-shadow: 0 5px 15px rgba(255, 255, 255, 0.2);
        }

        .btn-outline {
            background: transparent;
            border: 2px solid var(--text);
        }

        .btn-outline:hover {
            background: var(--text);
            color: var(--dark);
        }

        /* Categories Section */
        .category-section {
            margin-bottom: 40px;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
        }

        .section-title {
            font-size: 24px;
            font-weight: 700;
            position: relative;
            padding-left: 12px;
        }

        .section-title::before {
            content: '';
            position: absolute;
            left: 0;
            top: 5px;
            height: 80%;
            width: 4px;
            background: var(--primary);
            border-radius: 5px;
        }

        .view-all {
            color: var(--primary);
            text-decoration: none;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: all 0.3s;
            font-size: 14px;
        }

        .view-all:hover {
            gap: 8px;
        }

        .movies-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
        }

        .movie-card {
            background: var(--card-bg);
            border-radius: 10px;
            overflow: hidden;
            transition: transform 0.3s, box-shadow 0.3s;
            cursor: pointer;
            position: relative;
        }

        .movie-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.5);
        }

        .movie-poster {
            width: 100%;
            height: 300px;
            object-fit: cover;
        }

        .movie-badge {
            position: absolute;
            top: 8px;
            right: 8px;
            background: var(--primary);
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: bold;
        }

        .movie-info {
            padding: 12px;
        }

        .movie-title {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 6px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .movie-meta {
            display: flex;
            justify-content: space-between;
            color: var(--text-secondary);
            font-size: 12px;
        }

        .movie-rating {
            display: flex;
            align-items: center;
            gap: 4px;
            color: #ffc107;
        }

        /* Movie Details Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 2000;
            overflow-y: auto;
        }

        .modal-content {
            background: var(--light-dark);
            margin: 30px auto;
            max-width: 95%;
            border-radius: 12px;
            overflow: hidden;
            position: relative;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        }

        .close-modal {
            position: absolute;
            top: 12px;
            right: 12px;
            font-size: 24px;
            color: var(--text);
            cursor: pointer;
            z-index: 10;
            background: rgba(0, 0, 0, 0.5);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s;
        }

        .close-modal:hover {
            background: rgba(0, 0, 0, 0.8);
            transform: rotate(90deg);
        }

        .modal-poster {
            width: 100%;
            height: 350px;
            object-fit: cover;
        }

        .modal-info {
            padding: 20px;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 15px;
        }

        .modal-title {
            font-size: 26px;
            margin-bottom: 8px;
            line-height: 1.2;
        }

        .modal-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
            margin-bottom: 15px;
            color: var(--text-secondary);
            font-size: 14px;
        }

        .modal-meta span {
            display: flex;
            align-items: center;
            gap: 4px;
        }

        .modal-description {
            margin-bottom: 20px;
            line-height: 1.6;
            font-size: 15px;
        }

        .modal-actions {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        /* Trailer Section */
        .trailer-section {
            margin-bottom: 25px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            padding: 20px;
        }

        .trailer-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .trailer-title {
            font-size: 20px;
            font-weight: 600;
        }

        .trailer-duration {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .trailer-player {
            position: relative;
            width: 100%;
            height: 200px;
            background: #000;
            border-radius: 8px;
            overflow: hidden;
            margin-bottom: 15px;
        }

        .trailer-player video {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .play-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(0, 0, 0, 0.5);
            cursor: pointer;
            transition: background 0.3s;
        }

        .play-overlay:hover {
            background: rgba(0, 0, 0, 0.3);
        }

        .play-icon {
            font-size: 50px;
            color: white;
            opacity: 0.8;
            transition: transform 0.3s;
        }

        .play-overlay:hover .play-icon {
            transform: scale(1.1);
        }

        .trailer-genres {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            flex-wrap: wrap;
        }

        .genre-tag {
            background: rgba(255, 255, 255, 0.1);
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
        }

        /* Quality Selection */
        .quality-section {
            margin: 25px 0;
        }

        .quality-title {
            font-size: 18px;
            margin-bottom: 15px;
            font-weight: 600;
        }

        .quality-options {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
        }

        .quality-option {
            background: var(--card-bg);
            border: 2px solid transparent;
            border-radius: 8px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .quality-option:hover {
            border-color: var(--primary);
            transform: translateY(-3px);
        }

        .quality-option.selected {
            border-color: var(--primary);
            background: rgba(229, 9, 20, 0.1);
        }

        .quality-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .quality-name {
            font-weight: 600;
            font-size: 16px;
        }

        .quality-size {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .quality-format {
            color: var(--text-secondary);
            font-size: 12px;
        }

        .stream-btn {
            width: 100%;
            margin-top: 10px;
        }

        .cast-container {
            margin-bottom: 20px;
        }

        .cast-title {
            font-size: 18px;
            margin-bottom: 12px;
        }

        .cast-list {
            display: flex;
            gap: 12px;
            overflow-x: auto;
            padding-bottom: 8px;
        }

        .cast-item {
            min-width: 100px;
            text-align: center;
        }

        .cast-avatar {
            width: 70px;
            height: 70px;
            border-radius: 50%;
            object-fit: cover;
            margin: 0 auto 8px;
            display: block;
        }

        .cast-name {
            font-size: 13px;
            font-weight: 600;
        }

        .cast-character {
            font-size: 11px;
            color: var(--text-secondary);
        }

        /* Seasons & Episodes - Only for TV Shows */
        .seasons-container {
            margin-top: 20px;
            display: none;
        }

        .seasons-title {
            font-size: 18px;
            margin-bottom: 12px;
        }

        .season-selector {
            margin-bottom: 15px;
        }

        .season-dropdown {
            background: var(--card-bg);
            color: var(--text);
            border: none;
            padding: 10px 15px;
            border-radius: 8px;
            font-size: 15px;
            width: 100%;
            cursor: pointer;
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='white'%3e%3cpath d='M7 10l5 5 5-5z'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 15px center;
            background-size: 15px;
        }

        .episodes-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 12px;
            margin-top: 15px;
        }

        .episode-btn {
            background: var(--card-bg);
            border: none;
            color: var(--text);
            padding: 10px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            text-align: center;
            font-size: 14px;
        }

        .episode-btn:hover {
            background: var(--primary);
            transform: translateY(-3px);
        }

        .sources-container {
            margin-top: 20px;
        }

        .sources-title {
            font-size: 18px;
            margin-bottom: 12px;
        }

        .source-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s;
        }

        .source-item:hover {
            background: rgba(255, 255, 255, 0.15);
        }

        .source-info {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .source-quality {
            background: var(--primary);
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 11px;
            font-weight: bold;
        }

        .source-size {
            color: var(--text-secondary);
            font-size: 13px;
        }

        /* Video Player */
        .video-player {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.95);
            z-index: 3000;
            flex-direction: column;
        }

        .player-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background: rgba(0, 0, 0, 0.7);
        }

        .player-title {
            font-size: 16px;
            font-weight: 600;
        }

        .player-actions {
            display: flex;
            gap: 12px;
        }

        .player-actions button {
            background: transparent;
            border: none;
            color: var(--text);
            cursor: pointer;
            font-size: 18px;
        }

        .video-container {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 15px;
        }

        .video-container video {
            max-width: 100%;
            max-height: 100%;
            border-radius: 8px;
        }

        /* Loading Spinner */
        .spinner {
            display: inline-block;
            width: 25px;
            height: 25px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: var(--primary);
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .loading-spinner {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 30px;
            gap: 12px;
        }

        /* Side Menu */
        .side-menu {
            position: fixed;
            top: 0;
            right: -350px;
            width: 350px;
            height: 100%;
            background: var(--dark);
            z-index: 1002;
            transition: right 0.3s;
            padding: 80px 20px 20px;
            box-shadow: -2px 0 10px rgba(0,0,0,0.5);
            overflow-y: auto;
        }

        .side-menu.active {
            right: 0;
        }

        .side-menu-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1001;
        }

        .side-menu-overlay.active {
            display: block;
        }

        .side-menu-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 25px;
            padding-bottom: 15px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
        }

        .side-menu-title {
            font-size: 20px;
            font-weight: 600;
        }

        .close-side-menu {
            background: transparent;
            border: none;
            color: var(--text);
            font-size: 20px;
            cursor: pointer;
        }

        .side-menu-section {
            margin-bottom: 30px;
        }

        .side-menu-section-title {
            font-size: 18px;
            margin-bottom: 15px;
            color: var(--primary);
        }

        .side-menu-movies {
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .side-menu-movie {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 8px;
            border-radius: 8px;
            transition: background 0.3s;
            cursor: pointer;
        }

        .side-menu-movie:hover {
            background: rgba(255,255,255,0.1);
        }

        .side-menu-poster {
            width: 60px;
            height: 80px;
            object-fit: cover;
            border-radius: 5px;
        }

        .side-menu-movie-info {
            flex: 1;
        }

        .side-menu-movie-title {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .side-menu-movie-meta {
            font-size: 12px;
            color: var(--text-secondary);
        }

        .progress-bar {
            height: 4px;
            background: rgba(255,255,255,0.2);
            border-radius: 2px;
            margin-top: 5px;
            overflow: hidden;
        }

        .progress {
            height: 100%;
            background: var(--primary);
            width: 30%; /* Example progress */
        }

        /* Footer */
        footer {
            background: #000;
            padding: 40px 0 15px;
        }

        .footer-content {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
        }

        .social-links {
            display: flex;
            gap: 20px;
        }

        .social-links a {
            color: var(--text);
            font-size: 24px;
            transition: color 0.3s;
        }

        .social-links a:hover {
            color: var(--primary);
        }

        .copyright {
            text-align: center;
            color: var(--text-secondary);
            font-size: 13px;
            padding-top: 15px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .movies-grid {
                grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            }
        }

        @media (max-width: 768px) {
            .mobile-menu-btn {
                display: block;
            }

            nav {
                position: fixed;
                top: 0;
                left: -100%;
                width: 80%;
                height: 100vh;
                background: var(--dark);
                z-index: 1001;
                transition: left 0.3s;
                padding: 80px 20px 20px;
                box-shadow: 2px 0 10px rgba(0,0,0,0.5);
            }

            nav.active {
                left: 0;
            }

            nav ul {
                flex-direction: column;
                gap: 15px;
            }

            nav ul li {
                margin-left: 0;
            }

            .header-actions {
                margin-top: 0;
                width: auto;
            }

            .search-container {
                display: none;
            }

            .search-container.mobile-active {
                display: flex;
                position: absolute;
                top: 100%;
                left: 0;
                width: 100%;
                margin: 0;
                border-radius: 0;
                padding: 15px;
                background: var(--dark);
                box-shadow: 0 5px 10px rgba(0,0,0,0.3);
            }

            .search-container.mobile-active input {
                width: 100%;
            }

            .hero {
                height: 70vh;
                padding-top: 60px;
            }

            .hero h1 {
                font-size: 32px;
            }

            .hero p {
                font-size: 15px;
            }

            .movies-grid {
                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
                gap: 15px;
            }

            .movie-poster {
                height: 220px;
            }

            .modal-content {
                margin: 15px;
            }

            .modal-title {
                font-size: 22px;
            }

            .modal-actions {
                flex-direction: column;
            }

            .btn {
                margin-right: 0;
                margin-bottom: 8px;
                width: 100%;
                justify-content: center;
            }

            .episodes-container {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            }

            .quality-options {
                grid-template-columns: 1fr;
            }

            .trailer-player {
                height: 180px;
            }

            .side-menu {
                width: 300px;
            }
        }

        @media (max-width: 480px) {
            .hero {
                height: 60vh;
            }

            .hero h1 {
                font-size: 26px;
            }

            .section-title {
                font-size: 20px;
            }

            .movies-grid {
                grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));
                gap: 12px;
            }

            .movie-poster {
                height: 190px;
            }

            .trailer-player {
                height: 150px;
            }

            .side-menu {
                width: 100%;
                right: -100%;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header id="header">
        <div class="container">
            <div class="header-content">
                <button class="mobile-menu-btn" id="mobile-menu-btn">
                    <i class="fas fa-bars"></i>
                </button>
                <a href="#" class="logo">
                    <img src="https://via.placeholder.com/40x40/e50914/ffffff?text=MF" alt="Marisel Flix" class="logo-img">
                    Marisel <span>Flix</span>
                </a>
                <nav id="main-nav">
                    <ul>
                        <li><a href="#" class="active">Home</a></li>
                        <li><a href="#trending">Trending</a></li>
                        <li><a href="#hollywood">Hollywood</a></li>
                        <li><a href="#teens">Teens</a></li>
                        <li><a href="#drama">Drama</a></li>
                    </ul>
                </nav>
                <div class="header-actions">
                    <div class="search-container" id="search-container">
                        <input type="text" id="search-input" placeholder="Search for movies...">
                        <button id="search-btn"><i class="fas fa-search"></i></button>
                    </div>
                    <button id="mobile-search-btn" class="mobile-search-btn">
                        <i class="fas fa-search"></i>
                    </button>
                    <button id="side-menu-btn">
                        <i class="fas fa-history"></i>
                    </button>
                </div>
            </div>
        </div>
    </header>

    <!-- Side Menu Overlay -->
    <div class="side-menu-overlay" id="side-menu-overlay"></div>

    <!-- Side Menu -->
    <div class="side-menu" id="side-menu">
        <div class="side-menu-header">
            <h2 class="side-menu-title">Your Activity</h2>
            <button class="close-side-menu" id="close-side-menu">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="side-menu-section">
            <h3 class="side-menu-section-title">Continue Watching</h3>
            <div class="side-menu-movies" id="continue-watching">
                <!-- Continue watching items will be loaded here -->
            </div>
        </div>
        
        <div class="side-menu-section">
            <h3 class="side-menu-section-title">Recently Visited</h3>
            <div class="side-menu-movies" id="recently-visited">
                <!-- Recently visited items will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Hero Section -->
    <section class="hero" id="hero">
        <div class="container">
            <div class="hero-content">
                <h1 id="hero-title">Unlimited Movies, TV Shows, and More</h1>
                <p id="hero-description">Watch anywhere. Download anytime. Enjoy ad-free streaming on demand with Marisel Flix premium experience.</p>
                <button class="btn" id="explore-btn">
                    <i class="fas fa-play"></i> Explore Now
                </button>
                <button class="btn btn-secondary">
                    <i class="fas fa-info-circle"></i> Learn More
                </button>
            </div>
        </div>
    </section>

    <!-- Category Sections -->
    <main>
        <!-- Trending Now -->
        <section id="trending" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Trending Now</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="trending-movies">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading trending movies...</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Hollywood Movies -->
        <section id="hollywood" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Hollywood Movies</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="hollywood-movies">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading Hollywood movies...</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Teens -->
        <section id="teens" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Teens</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="teens-movies">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading teens movies...</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Drama -->
        <section id="drama" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Drama</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="drama-movies">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading drama movies...</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Western TV -->
        <section id="western" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Western TV</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="western-tv">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading Western TV shows...</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Anime -->
        <section id="anime" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Anime</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="anime-shows">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading anime...</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- K-Drama -->
        <section id="kdrama" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">K-Drama</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="kdrama-shows">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading K-Dramas...</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Nollywood -->
        <section id="nollywood" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Nollywood</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="nollywood-movies">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading Nollywood movies...</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Action -->
        <section id="action" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Action</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="action-movies">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading action movies...</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- Adventure -->
        <section id="adventure" class="category-section">
            <div class="container">
                <div class="section-header">
                    <h2 class="section-title">Adventure</h2>
                    <a href="#" class="view-all">View All <i class="fas fa-chevron-right"></i></a>
                </div>
                <div class="movies-grid" id="adventure-movies">
                    <div class="loading-spinner">
                        <div class="spinner"></div>
                        <p>Loading adventure movies...</p>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Search Results -->
    <section id="search-results-section" style="display: none;">
        <div class="container">
            <div class="section-header">
                <h2 class="section-title">Search Results</h2>
                <button class="btn btn-secondary" id="clear-search">Back to Home</button>
            </div>
            <div class="movies-grid" id="search-results">
                <!-- Search results will be loaded here -->
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer>
        <div class="container">
            <div class="footer-content">
                <div class="social-links">
                    <a href="#" title="Instagram"><i class="fab fa-instagram"></i></a>
                    <a href="#" title="WhatsApp"><i class="fab fa-whatsapp"></i></a>
                    <a href="#" title="YouTube"><i class="fab fa-youtube"></i></a>
                </div>
            </div>
            <div class="copyright">
                <p>&copy; 2023 Marisel Flix. All rights reserved.</p>
            </div>
        </div>
    </footer>

    <!-- Movie Details Modal -->
    <div class="modal" id="movie-modal">
        <div class="modal-content">
            <span class="close-modal" id="close-modal">&times;</span>
            <div id="modal-content">
                <!-- Movie details will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Video Player -->
    <div class="video-player" id="video-player">
        <div class="player-header">
            <div class="player-title" id="player-title">Movie Title</div>
            <div class="player-actions">
                <button id="minimize-player"><i class="fas fa-window-minimize"></i></button>
                <button id="expand-player"><i class="fas fa-expand"></i></button>
                <button id="close-player"><i class="fas fa-times"></i></button>
            </div>
        </div>
        <div class="video-container">
            <video id="video-element" controls>
                Your browser does not support the video tag.
            </video>
        </div>
    </div>

    <script>
        // API Base URL
        const API_BASE = 'https://movieapi.giftedtech.co.ke/api';

        // DOM Elements
        const searchInput = document.getElementById('search-input');
        const searchBtn = document.getElementById('search-btn');
        const searchResultsSection = document.getElementById('search-results-section');
        const searchResults = document.getElementById('search-results');
        const clearSearchBtn = document.getElementById('clear-search');
        const trendingMovies = document.getElementById('trending-movies');
        const hollywoodMovies = document.getElementById('hollywood-movies');
        const teensMovies = document.getElementById('teens-movies');
        const dramaMovies = document.getElementById('drama-movies');
        const westernTv = document.getElementById('western-tv');
        const animeShows = document.getElementById('anime-shows');
        const kdramaShows = document.getElementById('kdrama-shows');
        const nollywoodMovies = document.getElementById('nollywood-movies');
        const actionMovies = document.getElementById('action-movies');
        const adventureMovies = document.getElementById('adventure-movies');
        const movieModal = document.getElementById('movie-modal');
        const closeModal = document.getElementById('close-modal');
        const modalContent = document.getElementById('modal-content');
        const header = document.getElementById('header');
        const exploreBtn = document.getElementById('explore-btn');
        const videoPlayer = document.getElementById('video-player');
        const videoElement = document.getElementById('video-element');
        const playerTitle = document.getElementById('player-title');
        const minimizePlayer = document.getElementById('minimize-player');
        const expandPlayer = document.getElementById('expand-player');
        const closePlayer = document.getElementById('close-player');
        const mobileMenuBtn = document.getElementById('mobile-menu-btn');
        const mainNav = document.getElementById('main-nav');
        const mobileSearchBtn = document.getElementById('mobile-search-btn');
        const searchContainer = document.getElementById('search-container');
        const sideMenuBtn = document.getElementById('side-menu-btn');
        const sideMenu = document.getElementById('side-menu');
        const closeSideMenu = document.getElementById('close-side-menu');
        const sideMenuOverlay = document.getElementById('side-menu-overlay');
        const continueWatching = document.getElementById('continue-watching');
        const recentlyVisited = document.getElementById('recently-visited');
        const hero = document.getElementById('hero');
        const heroTitle = document.getElementById('hero-title');
        const heroDescription = document.getElementById('hero-description');

        // Current state
        let currentMovieId = null;
        let currentSeason = 1;
        let currentEpisodes = [];
        let selectedQuality = null;
        let currentMovieData = null;
        let heroMovies = [];
        let currentHeroIndex = 0;
        let heroInterval;

        // Event Listeners
        searchBtn.addEventListener('click', performSearch);
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') performSearch();
        });
        clearSearchBtn.addEventListener('click', clearSearch);
        closeModal.addEventListener('click', () => {
            movieModal.style.display = 'none';
        });
        exploreBtn.addEventListener('click', () => {
            document.getElementById('trending').scrollIntoView({ behavior: 'smooth' });
        });
        closePlayer.addEventListener('click', () => {
            videoPlayer.style.display = 'none';
            videoElement.pause();
        });
        minimizePlayer.addEventListener('click', () => {
            videoPlayer.style.display = 'none';
            videoElement.pause();
        });
        expandPlayer.addEventListener('click', toggleFullscreen);
        mobileMenuBtn.addEventListener('click', toggleMobileMenu);
        mobileSearchBtn.addEventListener('click', toggleMobileSearch);
        sideMenuBtn.addEventListener('click', openSideMenu);
        closeSideMenu.addEventListener('click', closeSideMenu);
        sideMenuOverlay.addEventListener('click', closeSideMenu);

        // Close modal when clicking outside
        window.addEventListener('click', (e) => {
            if (e.target === movieModal) {
                movieModal.style.display = 'none';
            }
            if (e.target === videoPlayer) {
                videoPlayer.style.display = 'none';
                videoElement.pause();
            }
        });

        // Header scroll effect
        window.addEventListener('scroll', () => {
            if (window.scrollY > 100) {
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        });

        // Initial load
        document.addEventListener('DOMContentLoaded', () => {
            loadTrendingMovies();
            loadHollywoodMovies();
            loadTeensMovies();
            loadDramaMovies();
            loadWesternTv();
            loadAnimeShows();
            loadKdramaShows();
            loadNollywoodMovies();
            loadActionMovies();
            loadAdventureMovies();
            loadHeroMovies();
            loadSideMenuContent();
        });

        // API Functions
        async function searchMovies(query) {
            try {
                const response = await fetch(`${API_BASE}/search/${encodeURIComponent(query)}`);
                return await response.json();
            } catch (error) {
                console.error('Error searching movies:', error);
                return { results: { items: [] } };
            }
        }

        async function getMovieInfo(movieId) {
            try {
                const response = await fetch(`${API_BASE}/info/${movieId}`);
                return await response.json();
            } catch (error) {
                console.error('Error getting movie info:', error);
                return { results: {} };
            }
        }

        async function getDownloadSources(movieId, season = null, episode = null) {
            try {
                let url = `${API_BASE}/sources/${movieId}`;
                if (season && episode) {
                    url += `?season=${season}&episode=${episode}`;
                }
                const response = await fetch(url);
                return await response.json();
            } catch (error) {
                console.error('Error getting download sources:', error);
                return { results: [] };
            }
        }

        // UI Functions
        function toggleMobileMenu() {
            mainNav.classList.toggle('active');
        }

        function toggleMobileSearch() {
            searchContainer.classList.toggle('mobile-active');
            if (searchContainer.classList.contains('mobile-active')) {
                searchInput.focus();
            }
        }

        function openSideMenu() {
            sideMenu.classList.add('active');
            sideMenuOverlay.classList.add('active');
        }

        function closeSideMenu() {
            sideMenu.classList.remove('active');
            sideMenuOverlay.classList.remove('active');
        }

        async function performSearch() {
            const query = searchInput.value.trim();
            if (!query) return;

            searchResults.innerHTML = '<div class="loading-spinner"><div class="spinner"></div><p>Searching...</p></div>';
            searchResultsSection.style.display = 'block';

            const results = await searchMovies(query);
            displayMovies(results.results.items, searchResults);

            // Scroll to search results
            searchResultsSection.scrollIntoView({ behavior: 'smooth' });
            
            // Close mobile search if active
            searchContainer.classList.remove('mobile-active');
        }

        function clearSearch() {
            searchInput.value = '';
            searchResultsSection.style.display = 'none';
        }

        function displayMovies(movies, container) {
            if (!movies || movies.length === 0) {
                container.innerHTML = '<p>No movies found.</p>';
                return;
            }

            container.innerHTML = movies.map(movie => `
                <div class="movie-card" data-id="${movie.subjectId}">
                    <img src="${movie.coverVerticalUrl || movie.cover?.url || movie.thumbnail || 'https://via.placeholder.com/300x450/2d2d2d/ffffff?text=No+Image'}" 
                         alt="${movie.title}" class="movie-poster">
                    ${movie.imdbRatingValue ? `<div class="movie-badge">⭐ ${movie.imdbRatingValue}</div>` : ''}
                    <div class="movie-info">
                        <h3 class="movie-title">${movie.title}</h3>
                        <div class="movie-meta">
                            <span>${movie.type || 'Movie'}</span>
                            <span>${movie.releaseDate || movie.releaseTime || 'N/A'}</span>
                        </div>
                    </div>
                </div>
            `).join('');

            // Add click event to movie cards
            container.querySelectorAll('.movie-card').forEach(card => {
                card.addEventListener('click', () => {
                    const movieId = card.getAttribute('data-id');
                    showMovieDetails(movieId);
                });
            });
        }

        async function showMovieDetails(movieId) {
            currentMovieId = movieId;
            modalContent.innerHTML = '<div class="loading-spinner"><div class="spinner"></div><p>Loading movie details...</p></div>';
            movieModal.style.display = 'block';

            const movieInfo = await getMovieInfo(movieId);
            const downloadSources = await getDownloadSources(movieId);
            
            const movie = movieInfo.results.subject || movieInfo.results;
            const stars = movieInfo.results.stars || [];
            const resource = movieInfo.results.resource || {};
            const seasons = resource.seasons || [];
            
            // Store movie data for later use
            currentMovieData = {
                movie,
                downloadSources: downloadSources.results || [],
                stars,
                seasons
            };
            
            // Check if it's a TV series (has seasons with episodes)
            const isTVSeries = seasons.length > 0 && seasons.some(season => season.maxEp > 0);
            
            // Get genres from movie data
            const genres = movie.genre ? movie.genre.split(',') : ['Drama', 'Mystery', 'Thriller'];
            
            modalContent.innerHTML = `
                <img src="${movie.coverVerticalUrl || movie.cover?.url || movie.thumbnail || 'https://via.placeholder.com/1000x450/2d2d2d/ffffff?text=No+Image'}" 
                     alt="${movie.title}" class="modal-poster">
                <div class="modal-info">
                    <div class="modal-header">
                        <div>
                            <h2 class="modal-title">${movie.title}</h2>
                            <div class="modal-meta">
                                <span>${isTVSeries ? 'TV Series' : 'Movie'}</span>
                                <span>${movie.releaseDate || movie.releaseTime || 'N/A'}</span>
                                <span>${movie.duration ? Math.floor(movie.duration / 60) + ' min' : 'N/A'}</span>
                                ${movie.imdbRatingValue ? `<span><i class="fas fa-star" style="color: #ffc107;"></i> ${movie.imdbRatingValue}/10</span>` : ''}
                                <span>${movie.countryName || ''}</span>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Trailer Section -->
                    <div class="trailer-section">
                        <div class="trailer-header">
                            <h3 class="trailer-title">Trailer</h3>
                            <div class="trailer-duration">0:08 / 2:05</div>
                        </div>
                        <div class="trailer-genres">
                            ${genres.slice(0, 3).map(genre => `
                                <span class="genre-tag">${genre.trim()}</span>
                            `).join('')}
                        </div>
                        <div class="trailer-player">
                            <video id="trailer-video" poster="${movie.coverVerticalUrl || movie.cover?.url || movie.thumbnail || 'https://via.placeholder.com/800x450/2d2d2d/ffffff?text=No+Image'}">
                                <source src="${movie.trailer?.videoAddress?.url || 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'}" type="video/mp4">
                                Your browser does not support the video tag.
                            </video>
                            <div class="play-overlay" id="play-trailer">
                                <i class="fas fa-play play-icon"></i>
                            </div>
                        </div>
                        <button class="btn stream-btn" id="watch-now-btn">
                            <i class="fas fa-play"></i> ${isTVSeries ? 'Watch Episode 1' : 'Watch Now'}
                        </button>
                    </div>
                    
                    <p class="modal-description">${movie.description || movie.introduction || 'No description available.'}</p>
                    
                    <!-- Quality Selection Section -->
                    <div class="quality-section">
                        <h3 class="quality-title">Select Quality to Stream</h3>
                        <div class="quality-options" id="quality-options">
                            <!-- Quality options will be loaded here -->
                        </div>
                    </div>
                    
                    ${stars.length > 0 ? `
                        <div class="cast-container">
                            <h3 class="cast-title">Cast</h3>
                            <div class="cast-list">
                                ${stars.slice(0, 6).map(star => `
                                    <div class="cast-item">
                                        <img src="${star.avatarUrl || 'https://via.placeholder.com/80x80/2d2d2d/ffffff?text=No+Image'}" 
                                             alt="${star.name}" class="cast-avatar">
                                        <div class="cast-name">${star.name}</div>
                                        <div class="cast-character">${star.character || 'Actor'}</div>
                                    </div>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                    
                    <!-- Seasons & Episodes - Only for TV Series -->
                    ${isTVSeries ? `
                        <div class="seasons-container" id="seasons-container">
                            <h3 class="seasons-title">Seasons & Episodes</h3>
                            <div class="season-selector">
                                <select class="season-dropdown" id="season-dropdown">
                                    ${seasons.map(season => `
                                        <option value="${season.se}">Season ${season.se === 0 ? '1' : season.se}</option>
                                    `).join('')}
                                </select>
                            </div>
                            <div class="episodes-container" id="episodes-container">
                                <!-- Episodes will be loaded here -->
                            </div>
                        </div>
                    ` : ''}
                    
                    <div class="sources-container">
                        <h3 class="sources-title">Available Sources</h3>
                        ${downloadSources.results && downloadSources.results.length > 0 ? 
                            downloadSources.results.map(source => `
                                <div class="source-item">
                                    <div class="source-info">
                                        <span class="source-quality">${source.quality || 'Unknown Quality'}</span>
                                        <span class="source-size">${source.size ? (source.size / (1024*1024)).toFixed(2) + ' MB' : ''}</span>
                                        <span>${source.format || 'mp4'}</span>
                                    </div>
                                    <a href="${source.download_url}" class="btn" target="_blank">
                                        <i class="fas fa-download"></i> Download
                                    </a>
                                </div>
                            `).join('') : 
                            '<p>No download sources available.</p>'
                        }
                    </div>
                </div>
            `;

            // Load quality options
            loadQualityOptions(downloadSources.results || []);

            // Add event listeners
            const playTrailerBtn = document.getElementById('play-trailer');
            const trailerVideo = document.getElementById('trailer-video');
            const watchNowBtn = document.getElementById('watch-now-btn');

            if (playTrailerBtn) {
                playTrailerBtn.addEventListener('click', () => {
                    if (trailerVideo.paused) {
                        trailerVideo.play();
                        playTrailerBtn.style.display = 'none';
                    }
                });
            }

            if (trailerVideo) {
                trailerVideo.addEventListener('click', () => {
                    if (!trailerVideo.paused) {
                        trailerVideo.pause();
                        playTrailerBtn.style.display = 'flex';
                    }
                });
            }

            if (watchNowBtn) {
                watchNowBtn.addEventListener('click', () => {
                    if (selectedQuality) {
                        playMovie(selectedQuality, isTVSeries ? 1 : null);
                    } else {
                        alert('Please select a quality option first');
                    }
                });
            }

            // If it's a TV series, set up season/episode selection
            if (isTVSeries) {
                const seasonsContainer = document.getElementById('seasons-container');
                seasonsContainer.style.display = 'block';
                setupSeasonSelection(seasons, movieId);
            }

            // Add to recently visited
            addToRecentlyVisited(movie);
        }

        function loadQualityOptions(sources) {
            const qualityOptions = document.getElementById('quality-options');
            
            if (!sources || sources.length === 0) {
                qualityOptions.innerHTML = '<p>No streaming options available</p>';
                return;
            }

            // Create quality options
            qualityOptions.innerHTML = sources.map(source => `
                <div class="quality-option" data-quality="${source.quality}" data-url="${source.download_url}">
                    <div class="quality-header">
                        <span class="quality-name">${source.quality || 'Unknown'}</span>
                        <span class="quality-size">${source.size ? (source.size / (1024*1024)).toFixed(0) + 'MB' : 'Unknown'}</span>
                    </div>
                    <div class="quality-format">${source.format || 'MP4'}</div>
                </div>
            `).join('');

            // Add event listeners to quality options
            qualityOptions.querySelectorAll('.quality-option').forEach(option => {
                option.addEventListener('click', () => {
                    // Remove selected class from all options
                    qualityOptions.querySelectorAll('.quality-option').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    
                    // Add selected class to clicked option
                    option.classList.add('selected');
                    
                    // Store selected quality
                    selectedQuality = {
                        quality: option.getAttribute('data-quality'),
                        url: option.getAttribute('data-url')
                    };
                });
            });

            // Auto-select the first option
            if (sources.length > 0) {
                const firstOption = qualityOptions.querySelector('.quality-option');
                if (firstOption) {
                    firstOption.classList.add('selected');
                    selectedQuality = {
                        quality: firstOption.getAttribute('data-quality'),
                        url: firstOption.getAttribute('data-url')
                    };
                }
            }
        }

        async function playMovie(quality, episode = null) {
            let videoUrl = quality.url;
            
            // If it's a TV series and episode is specified, get the specific episode URL
            if (episode && currentMovieData.seasons.length > 0) {
                const episodeSources = await getDownloadSources(currentMovieId, currentSeason, episode);
                if (episodeSources.results && episodeSources.results.length > 0) {
                    // Find the same quality for the episode
                    const episodeQuality = episodeSources.results.find(source => 
                        source.quality === quality.quality
                    );
                    if (episodeQuality) {
                        videoUrl = episodeQuality.download_url;
                    }
                }
            }
            
            // Use the actual movie/episode URL from the API
            videoElement.src = videoUrl;
            playerTitle.textContent = episode ? 
                `${currentMovieData.movie.title} - Season ${currentSeason} Episode ${episode} (${quality.quality})` :
                `${currentMovieData.movie.title} (${quality.quality})`;
            videoPlayer.style.display = 'flex';
            videoElement.play();

            // Add to continue watching
            addToContinueWatching(currentMovieData.movie);
        }

        function setupSeasonSelection(seasons, movieId) {
            const seasonDropdown = document.getElementById('season-dropdown');
            const episodesContainer = document.getElementById('episodes-container');
            
            // Add event listener to season dropdown
            seasonDropdown.addEventListener('change', () => {
                currentSeason = seasonDropdown.value;
                loadEpisodes(movieId, currentSeason, episodesContainer);
            });
            
            // Load episodes for the first season
            if (seasons.length > 0) {
                currentSeason = seasons[0].se;
                loadEpisodes(movieId, currentSeason, episodesContainer);
            }
        }

        async function loadEpisodes(movieId, season, episodesContainer) {
            episodesContainer.innerHTML = '<div class="loading-spinner"><div class="spinner"></div><p>Loading episodes...</p></div>';
            
            // Get episode count from API
            const movieInfo = await getMovieInfo(movieId);
            const resource = movieInfo.results.resource || {};
            const seasons = resource.seasons || [];
            
            let episodeCount = 1; // Default
            if (seasons.length > 0) {
                const currentSeasonData = seasons.find(s => s.se == season) || seasons[0];
                episodeCount = currentSeasonData.maxEp || 1;
            }
            
            episodesContainer.innerHTML = '';
            for (let i = 1; i <= episodeCount; i++) {
                const episodeBtn = document.createElement('button');
                episodeBtn.className = 'episode-btn';
                episodeBtn.textContent = `Episode ${i}`;
                episodeBtn.addEventListener('click', () => {
                    if (selectedQuality) {
                        playMovie(selectedQuality, i);
                    } else {
                        alert('Please select a quality option first');
                    }
                });
                episodesContainer.appendChild(episodeBtn);
            }
        }

        function toggleFullscreen() {
            if (!document.fullscreenElement) {
                videoElement.requestFullscreen().catch(err => {
                    console.error(`Error attempting to enable fullscreen: ${err.message}`);
                });
            } else {
                document.exitFullscreen();
            }
        }

        // Load category content
        async function loadCategoryContent(category, container) {
            const results = await searchMovies(category);
            if (results.results && results.results.items) {
                displayMovies(results.results.items.slice(0, 8), container);
            } else {
                container.innerHTML = '<p>Failed to load content. Please try again later.</p>';
            }
        }

        // Load all category sections
        async function loadTrendingMovies() {
            const results = await searchMovies('2023');
            if (results.results && results.results.items) {
                displayMovies(results.results.items.slice(0, 8), trendingMovies);
            } else {
                trendingMovies.innerHTML = '<p>Failed to load trending movies. Please try again later.</p>';
            }
        }

        async function loadHollywoodMovies() {
            await loadCategoryContent('hollywood', hollywoodMovies);
        }

        async function loadTeensMovies() {
            await loadCategoryContent('teen', teensMovies);
        }

        async function loadDramaMovies() {
            await loadCategoryContent('drama', dramaMovies);
        }

        async function loadWesternTv() {
            await loadCategoryContent('western', westernTv);
        }

        async function loadAnimeShows() {
            await loadCategoryContent('anime', animeShows);
        }

        async function loadKdramaShows() {
            await loadCategoryContent('korean', kdramaShows);
        }

        async function loadNollywoodMovies() {
            await loadCategoryContent('nollywood', nollywoodMovies);
        }

        async function loadActionMovies() {
            await loadCategoryContent('action', actionMovies);
        }

        async function loadAdventureMovies() {
            await loadCategoryContent('adventure', adventureMovies);
        }

        // Load hero movies
        async function loadHeroMovies() {
            const results = await searchMovies('popular');
            if (results.results && results.results.items) {
                heroMovies = results.results.items.slice(0, 10);
                startHeroRotation();
            }
        }

        // Start hero rotation
        function startHeroRotation() {
            if (heroMovies.length === 0) return;
            
            let index = 0;
            updateHeroContent(heroMovies[index]);
            
            heroInterval = setInterval(() => {
                index = (index + 1) % heroMovies.length;
                updateHeroContent(heroMovies[index]);
            }, 5000); // Change every 5 seconds
        }

        // Update hero content
        function updateHeroContent(movie) {
            heroTitle.textContent = movie.title;
            heroDescription.textContent = movie.description || 'Watch now on Marisel Flix';
            hero.style.backgroundImage = `linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.7)), url('${movie.coverVerticalUrl || movie.cover?.url || movie.thumbnail || 'https://via.placeholder.com/1200x600/2d2d2d/ffffff?text=Marisel+Flix'}')`;
            
            // Update hero button to open this movie
            const watchHeroBtn = document.getElementById('explore-btn');
            watchHeroBtn.onclick = () => {
                showMovieDetails(movie.subjectId);
            };
        }

        // Load side menu content
        function loadSideMenuContent() {
            // In a real app, this would load from localStorage or a database
            // For demo, we'll show empty states
            continueWatching.innerHTML = '<p>No content in progress</p>';
            recentlyVisited.innerHTML = '<p>No recently visited content</p>';
        }

        // Add to recently visited
        function addToRecentlyVisited(movie) {
            // In a real app, this would save to localStorage
            console.log(`Added ${movie.title} to recently visited`);
        }

        // Add to continue watching
        function addToContinueWatching(movie) {
            // In a real app, this would save to localStorage
            console.log(`Added ${movie.title} to continue watching`);
        }
    </script>
</body>
</html>
